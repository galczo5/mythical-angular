<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mythical Angular</title><link>https://galczo5.github.io/mythical-angular/</link><description>Recent content on Mythical Angular</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Kamil Gałek</copyright><lastBuildDate>Mon, 21 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://galczo5.github.io/mythical-angular/index.xml" rel="self" type="application/rss+xml"/><item><title>Myth: Styling method doesn't matter</title><link>https://galczo5.github.io/mythical-angular/posts/renderer/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://galczo5.github.io/mythical-angular/posts/renderer/</guid><description>Today I&amp;rsquo;m going to show you how to test different methods of html styling in Angular. You&amp;rsquo;re going to learn what is Renderer, how and when to it and of course how it&amp;rsquo;s implemented in the framework. I&amp;rsquo;m going to compare different approaches of adding styles to find the best one. You&amp;rsquo;ll see that it&amp;rsquo;s not that simple.
Angular build-in directives At the very beginning, when you learn about Angular styling.</description></item><item><title>Myth: Change Detection Strategies</title><link>https://galczo5.github.io/mythical-angular/posts/change-detection-strategies/</link><pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate><guid>https://galczo5.github.io/mythical-angular/posts/change-detection-strategies/</guid><description>Not so long ago I noticed that the change detection subject in Angular is very mythical. For the first sight, it looks very simple, and it is.
Docs So, we have two change detection strategies: Default and OnPush. If you have not specified which one you want to use in your component, it&amp;rsquo;s going to use Default one. Our experiment we should start with the docs.
As you can see, the documentation is not that easy to base here only on the docs.</description></item><item><title>Myth: Using set instead ngOnChanges improves the performance</title><link>https://galczo5.github.io/mythical-angular/posts/setters/</link><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid>https://galczo5.github.io/mythical-angular/posts/setters/</guid><description>Introduction Why using sets instead of ngOnChanges is considered as a good practice&amp;hellip;? I&amp;rsquo;m not sure, but I heard it so many times that I decided to check it. Thanks to luck, I found the root of this myth.
The myth It all started when I asked a frontend developer about practices that are helpful with dealing with the Angular performance problems. One of the things he said was that using sets on inputs is a performance tweak.</description></item><item><title>Myth: Async pipes are good for performance</title><link>https://galczo5.github.io/mythical-angular/posts/async-pipe/</link><pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate><guid>https://galczo5.github.io/mythical-angular/posts/async-pipe/</guid><description>Introduction Async pipes are considered a very good practice as they help with web performance problems and btw are easy to use. Sounds very cool, right?
Unfortunately, it&amp;rsquo;s not true. It would be so good to use async pipes everywhere and don&amp;rsquo;t worry about any observable related performance problems.
Before I&amp;rsquo;ll start to explain what the problem with async pipe is, let&amp;rsquo;s check how it&amp;rsquo;s implemented.
AsyncPipe source code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 /** * @license * Copyright Google LLC All Rights Reserved.</description></item><item><title>Intro - What is 'Mythical Angular'</title><link>https://galczo5.github.io/mythical-angular/posts/intro/</link><pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate><guid>https://galczo5.github.io/mythical-angular/posts/intro/</guid><description>1 2 3 4 5 6 function main() { return &amp;#39;Hello world!&amp;#39;; } const result = main(); console.info(result); Hi all!
My Name is Kamil Gałek, and I&amp;rsquo;m frontend developer. My daily work is based mostly on the Angular framework. I had that opportunity to learn a lot from my more experienced colleagues, and I think it&amp;rsquo;s time to share what I know.
I&amp;rsquo;m a technical recruiter too.</description></item></channel></rss>